{% extends 'base.html.twig' %}

{% block body %}
    <h1 class="uk-tile uk-tile-default uk-padding-small">Charger des commandes en vanilla JS</h1>
    <div uk-filter="target: #orders">

        <!-- Filtre des commandes -->
        <!-- Database request -->
        <form>
            <label for="order-filter">Filtre des commandes :</label>
            <select onchange="fetchOrder()" id="order-filter">
                <option value="">-- Tous les status ---</option>
                <option value="new">new</option>
                <option value="shipped">shipped</option>
                <option value="canceled">canceled</option>
            </select>
        </form>
         <!-- Only js -->
        <div class="uk-margin uk-grid-small uk-child-width-auto uk-grid">
            <label><input class="uk-checkbox filterCheckbox" type="checkbox"  value="new"> new</label>
            <label><input class="uk-checkbox filterCheckbox" type="checkbox"  value="shipped"> shipped</label>
            <label><input class="uk-checkbox filterCheckbox" type="checkbox"  value="canceled"> canceled</label>
        </div>   
        <h3>Nombre de commandes affiché: <strong id="nbCommandes"></strong></h3>
        <!-- Liste des commandes -->
        <ul id="orders"></ul>
    </div>

    
    <!-- Template -->
    <template id="order-line">
        <li class="order showOrder">
            <span class="order-id" style="display: inline-block; width: 50px;"></span>
            <span class="order-date" style="display: inline-block; width: 250px;"></span>
            <span class="order-customer" style="display: inline-block; width: 300px;"></span>
            <span class="order-status" style="display: inline-block; width: 100px;"></span>
        </li>
    </template>

    <script type="application/javascript">
        var checkboxs = document.getElementsByClassName("filterCheckbox");
        Array.prototype.forEach.call(checkboxs, checkbox =>{ 
            checkbox.addEventListener('change', (event) => {
                filterOrder()
            })
        })
        var nbCommandes = document.getElementById("nbCommandes");

        var select = document.getElementById("order-filter");
        // Récupération du template
        var orderTemplate = document.getElementById("order-line"); 
        // Récupération du container d'orders
        var orderDiv = document.getElementById("orders"); 
        //fonction d'appel api
        function fetchOrder(){

            //définition des variables
            const url = 'http://localhost:8000/api/orders/random'

            // Récupération du select(filtre)
            var selectedValue = select.options[select.selectedIndex].value

            //attente de l'appel en ajax
            orderDiv.innerHTML= "<span uk-spinner='ratio: 4.5'></span>"

                $.ajax({
                    method: "GET",
                    url: url,
                    data:{'filtre':selectedValue}
                })
                .done(function(newOrders ) {
                    insertOrderInHTML(newOrders)
                    filterOrder()
                });
                
            }
            //récupère la liste d'order dans l'html puis actualise l'affichage en fonction du/des filtres
            function filterOrder(){
                var filter = []
                
                Array.prototype.forEach.call(checkboxs, checkbox =>{ if(checkbox.checked) filter.push(checkbox.value);})
                console.log("filter",filter)
                orders = document.getElementsByClassName("order");
                var i = 0;
                Array.prototype.forEach.call(orders, order =>{
                    if(filter.includes(order.getAttribute("data-status")) || filter.length === 0){ // regarde si le data-status est contenu dans l'array filter
                        order.classList.replace("hiddenOrder","showOrder")
                        i++
                    }else{
                        order.classList.replace("showOrder","hiddenOrder")
                    }
                });
                nbCommandes.innerHTML = i
            }
            //Fonction qui prend en paramètre une liste d'order
            //efface le contenu HTML et le remplace par la nouvelle liste
            function insertOrderInHTML(orders){
                orderDiv.innerHTML ='';
                //Boucle sur les orders
                orders.forEach(order => {

                    // Définition des valeurs du template
                    orderTemplate.content.querySelector('li').setAttribute('data-status',order.status)
                    orderTemplate.content.querySelector('.order-id').textContent = order.id
                    orderTemplate.content.querySelector('.order-date').textContent = order.created_at
                    orderTemplate.content.querySelector('.order-customer').textContent = order.firstname + order.lastname
                    orderTemplate.content.querySelector('.order-status').textContent = order.status
                    let clone = document.importNode(orderTemplate.content, true);
                    // insertion du template
                    orderDiv.appendChild(clone);
                });

            }

            //Appel de la fonction lors d'événements
            window.addEventListener('DOMContentLoaded', function() {
                fetchOrder();
            });

    </script>




    
    <style>
    .showOrder{
        animation:goIn 0.5s ease forwards; 
    }
    .hiddenOrder{
        animation:goOut 0.5s ease; 
        display:none;
    }
    @keyframes goOut{
        0%{
            transform:translateX(0px);
            opacity:1;
            display:flex;
        }
        100%{
            opacity:0;
            transform:translateX(20px);
        }
    }    
    @keyframes goIn{
        0%{
            transform:translateX(-20px);
            display:flex;
            opacity:0;
        }
        100%{
            opacity:1;
            transform:translateX(0px);
        }
    }
    #orders{
        min-height: 50vh;
        display: flex;
        justify-content: center;
        align-items: center;
        flex-direction: row;
        max-width: 90vw;
        flex-wrap: wrap;
    }
	#orders li {
        width: 100%;
        list-style: none;
        border-radius: 5px;
        box-shadow: 0px 7px 10px rgba(100, 100, 100, 0.26);
        margin: 20px 0;
        padding: 15px 10px;
        justify-content: space-evenly;
        /*animation: ease 0.5s forwards goin;*/
	}
    li div{
        width:20%;
    }
</style>
{% endblock %}